C++ supports so-called class template argument deduction (CTAD), as discussed in detail in Chap-ter 12.
std::optional Page 87(37) pdf(book)

Check out: https://blog.jetbrains.com/rscpp/2019/07/10/better-ways-testing-with-doctest/
https://medium.com/@zackbunch/python-doctest-and-unittest-f0292af324c4

With: int x = 42; int &xx = x;
The address of a reference e.g. &xx == &xx
printf("Adr of x: %p, of xx: %p ", (void *)&x, (void *)&xx);
=>  Adr of x: 0x7ffd3e1b3afc, of xx: 0x7ffd3e1b3afc
${workspaceFolder} is set to where VS Code is launched (e.g. /home/kell/repos/ProfessionalCPP)
Chapter1/employeeRecords/test_employee.cpp
  int m_frequentFlyer;  // optional frequent-flyer number

Errata in text
Page 392 The text states:

// Need reinterpret_cast for pointer conversion from void*
xp = reinterpret_cast(p);

reinterpret_cast() is too strong. A static_cast() is enough, so the code can be changed to:

// Need static_cast for pointer conversion from void*
xp = static_cast(p);
-----
Page 630 The text states:

Used every time you remove an element,or when a vector grows in size and the elements are not noexcept movable.

This should read:

Used every time you remove an element, or when a vector grows in size.